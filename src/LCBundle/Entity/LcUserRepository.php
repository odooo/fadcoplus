<?php

namespace LCBundle\Entity;

/**
 * LcUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LcUserRepository extends \Doctrine\ORM\EntityRepository
{
	public function findLcUsers($ignoredId){
		$qb = $this->createQueryBuilder('lcu');
		$qb->where('lcu.id <> :id')
		->setParameter('id', $ignoredId)
		->orderBy("CONCAT(lcu.nom, ' ' , lcu.prenom)", 'ASC');
		
		return $qb->getQuery()->getResult();
	}

	public function findLcUserInId($contacts){
		$crit = "";
		if(count($contacts)>1) 
			$crit = 'lcu.id in (:id)';
		else $crit = 'lcu.id = :id';

		$qb = $this->createQueryBuilder('lcu');
		$qb->where($crit)
		->setParameter('id', $contacts);
		
		return $qb->getQuery()->getResult();
	}
        
        public function findNotIn($usersRestants){
            $qb = $this->createQueryBuilder('lcu');
		$qb->where('lcu NOT IN (:id)')
		->setParameter('id', $usersRestants)
		->orderBy("CONCAT(lcu.nom, ' ' , lcu.prenom)", 'ASC');
		
		return $qb->getQuery()->getResult();
        }
        
        public function getDuplicated($id, $ido){
		$qb = $this->createQueryBuilder('lcu');
		$qb->where('lcu.id <> :id')
		->setParameter('id', $id)->andWhere('lcu.idoriginal = :ido')
                        ->setParameter('ido', $ido);
		
		return $qb->getQuery()->getResult();
	}
        
        public function findAllGroupBy($champ){
		$qb = $this->createQueryBuilder('u');
		$qb->groupBy('u.'.$champ);
		
		return $qb->getQuery()->getResult();
	}
}
